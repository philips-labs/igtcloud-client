"""
    Apis

    IGT Cloud entities  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from igtcloud.client.services.entities.api_client import ApiClient, Endpoint as _Endpoint
from igtcloud.client.services.entities.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from igtcloud.client.services.entities.model.annotation_state_model import AnnotationStateModel
from igtcloud.client.services.entities.model.electronic_record_state_model import ElectronicRecordStateModel
from igtcloud.client.services.entities.model.file_sizes_model import FileSizesModel
from igtcloud.client.services.entities.model.files_response import FilesResponse
from igtcloud.client.services.entities.model.hospitals_response import HospitalsResponse
from igtcloud.client.services.entities.model.model4xx_message import Model4xxMessage
from igtcloud.client.services.entities.model.root_studies_model import RootStudiesModel
from igtcloud.client.services.entities.model.series_create_model import SeriesCreateModel


class HospitalsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_study_files_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'delete_study_files_resource',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_study_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'delete_study_resource',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_study_series_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series/{series_id}',
                'operation_id': 'delete_study_series_resource',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'series_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'series_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_all_hospitals_resource_endpoint = _Endpoint(
            settings={
                'response_type': (HospitalsResponse,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals',
                'operation_id': 'get_all_hospitals_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_series_list_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series',
                'operation_id': 'get_series_list_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_series_preview_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series/{series_id}/{file_name}',
                'operation_id': 'get_series_preview_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'series_id',
                    'file_name',
                ],
                'required': [
                    'hospital_id',
                    'series_id',
                    'file_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'series_id':
                        (str,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'series_id': 'series_id',
                    'file_name': 'file_name',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'series_id': 'path',
                    'file_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_series_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series/{series_id}',
                'operation_id': 'get_series_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'series_id',
                ],
                'required': [
                    'hospital_id',
                    'series_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'series_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'series_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_studies_resource_endpoint = _Endpoint(
            settings={
                'response_type': (RootStudiesModel,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies',
                'operation_id': 'get_studies_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_study_download_file_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/download-files',
                'operation_id': 'get_study_download_file_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_study_files_resource_endpoint = _Endpoint(
            settings={
                'response_type': (FilesResponse,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'get_study_files_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'auxiliary',
                    'x_fields',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'auxiliary':
                        (bool,),
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'auxiliary': 'auxiliary',
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'auxiliary': 'query',
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_study_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'get_study_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_study_series_list_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series',
                'operation_id': 'get_study_series_list_resource',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_study_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'patch_study_resource',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_studies_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies',
                'operation_id': 'post_studies_resource',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'payload':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_study_annotation_state_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/annotation-state',
                'operation_id': 'post_study_annotation_state_resource',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (AnnotationStateModel,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_study_download_link_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/download-link',
                'operation_id': 'post_study_download_link_resource',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_study_electronic_record_state_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/electronic-record-state',
                'operation_id': 'post_study_electronic_record_state_resource',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (ElectronicRecordStateModel,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_study_files_resource_endpoint = _Endpoint(
            settings={
                'response_type': (FilesResponse,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'post_study_files_resource',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (FileSizesModel,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_study_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'put_study_resource',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_study_series_resource_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series/{series_id}',
                'operation_id': 'put_study_series_resource',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'series_id':
                        (str,),
                    'payload':
                        (SeriesCreateModel,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'series_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def delete_study_files_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """delete_study_files_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_study_files_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.delete_study_files_resource_endpoint.call_with_http_info(**kwargs)

    def delete_study_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """delete_study_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_study_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.delete_study_resource_endpoint.call_with_http_info(**kwargs)

    def delete_study_series_resource(
        self,
        hospital_id,
        study_id,
        series_id,
        **kwargs
    ):
        """delete_study_series_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_study_series_resource(hospital_id, study_id, series_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            series_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['series_id'] = \
            series_id
        return self.delete_study_series_resource_endpoint.call_with_http_info(**kwargs)

    def get_all_hospitals_resource(
        self,
        **kwargs
    ):
        """get_all_hospitals_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_hospitals_resource(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            x_fields (str): An optional fields mask. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            HospitalsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_all_hospitals_resource_endpoint.call_with_http_info(**kwargs)

    def get_series_list_resource(
        self,
        hospital_id,
        **kwargs
    ):
        """get_series_list_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_series_list_resource(hospital_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):

        Keyword Args:
            filter (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        return self.get_series_list_resource_endpoint.call_with_http_info(**kwargs)

    def get_series_preview_resource(
        self,
        hospital_id,
        series_id,
        file_name,
        **kwargs
    ):
        """get_series_preview_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_series_preview_resource(hospital_id, series_id, file_name, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            series_id (str):
            file_name (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['series_id'] = \
            series_id
        kwargs['file_name'] = \
            file_name
        return self.get_series_preview_resource_endpoint.call_with_http_info(**kwargs)

    def get_series_resource(
        self,
        hospital_id,
        series_id,
        **kwargs
    ):
        """get_series_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_series_resource(hospital_id, series_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            series_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['series_id'] = \
            series_id
        return self.get_series_resource_endpoint.call_with_http_info(**kwargs)

    def get_studies_resource(
        self,
        hospital_id,
        **kwargs
    ):
        """get_studies_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_studies_resource(hospital_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):

        Keyword Args:
            filter (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            RootStudiesModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        return self.get_studies_resource_endpoint.call_with_http_info(**kwargs)

    def get_study_download_file_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """get_study_download_file_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_study_download_file_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.get_study_download_file_resource_endpoint.call_with_http_info(**kwargs)

    def get_study_files_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """get_study_files_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_study_files_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            auxiliary (bool): [optional] if omitted the server will use the default value of False
            x_fields (str): An optional fields mask. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.get_study_files_resource_endpoint.call_with_http_info(**kwargs)

    def get_study_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """get_study_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_study_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.get_study_resource_endpoint.call_with_http_info(**kwargs)

    def get_study_series_list_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """get_study_series_list_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_study_series_list_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            filter (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.get_study_series_list_resource_endpoint.call_with_http_info(**kwargs)

    def patch_study_resource(
        self,
        hospital_id,
        study_id,
        payload,
        **kwargs
    ):
        """patch_study_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_study_resource(hospital_id, study_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            payload (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['payload'] = \
            payload
        return self.patch_study_resource_endpoint.call_with_http_info(**kwargs)

    def post_studies_resource(
        self,
        hospital_id,
        payload,
        **kwargs
    ):
        """post_studies_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_studies_resource(hospital_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            payload (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['payload'] = \
            payload
        return self.post_studies_resource_endpoint.call_with_http_info(**kwargs)

    def post_study_annotation_state_resource(
        self,
        hospital_id,
        study_id,
        payload,
        **kwargs
    ):
        """post_study_annotation_state_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_study_annotation_state_resource(hospital_id, study_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            payload (AnnotationStateModel):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['payload'] = \
            payload
        return self.post_study_annotation_state_resource_endpoint.call_with_http_info(**kwargs)

    def post_study_download_link_resource(
        self,
        hospital_id,
        study_id,
        **kwargs
    ):
        """post_study_download_link_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_study_download_link_resource(hospital_id, study_id, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        return self.post_study_download_link_resource_endpoint.call_with_http_info(**kwargs)

    def post_study_electronic_record_state_resource(
        self,
        hospital_id,
        study_id,
        payload,
        **kwargs
    ):
        """post_study_electronic_record_state_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_study_electronic_record_state_resource(hospital_id, study_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            payload (ElectronicRecordStateModel):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['payload'] = \
            payload
        return self.post_study_electronic_record_state_resource_endpoint.call_with_http_info(**kwargs)

    def post_study_files_resource(
        self,
        hospital_id,
        study_id,
        payload,
        **kwargs
    ):
        """This create study files endpoint actually only stores the file size of a study_id + key combination  # noqa: E501

        Used only for retrieving progress percentage of uploads.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_study_files_resource(hospital_id, study_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            payload (FileSizesModel):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            FilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['payload'] = \
            payload
        return self.post_study_files_resource_endpoint.call_with_http_info(**kwargs)

    def put_study_resource(
        self,
        hospital_id,
        study_id,
        payload,
        **kwargs
    ):
        """put_study_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_study_resource(hospital_id, study_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            payload (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['payload'] = \
            payload
        return self.put_study_resource_endpoint.call_with_http_info(**kwargs)

    def put_study_series_resource(
        self,
        hospital_id,
        study_id,
        series_id,
        payload,
        **kwargs
    ):
        """put_study_series_resource  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_study_series_resource(hospital_id, study_id, series_id, payload, async_req=True)
        >>> result = thread.get()

        Args:
            hospital_id (str):
            study_id (str):
            series_id (str):
            payload (SeriesCreateModel):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['hospital_id'] = \
            hospital_id
        kwargs['study_id'] = \
            study_id
        kwargs['series_id'] = \
            series_id
        kwargs['payload'] = \
            payload
        return self.put_study_series_resource_endpoint.call_with_http_info(**kwargs)

