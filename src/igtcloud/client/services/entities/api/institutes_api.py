"""
    Apis

    IGT Cloud entities  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from igtcloud.client.services.entities.api_client import ApiClient, Endpoint as _Endpoint
from igtcloud.client.services.entities.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from igtcloud.client.services.entities.model.annotation_state import AnnotationState
from igtcloud.client.services.entities.model.case_label import CaseLabel
from igtcloud.client.services.entities.model.electronic_record_state import ElectronicRecordState
from igtcloud.client.services.entities.model.file import File
from igtcloud.client.services.entities.model.files import Files
from igtcloud.client.services.entities.model.institute import Institute
from igtcloud.client.services.entities.model.model4xx_message import Model4xxMessage
from igtcloud.client.services.entities.model.root_study import RootStudy
from igtcloud.client.services.entities.model.series import Series
from igtcloud.client.services.entities.model.study_sticky_note import StudyStickyNote


class InstitutesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __delete_study(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """delete_study  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_study(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.delete_study = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'delete_study',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_study
        )

        def __delete_study_annotations(
            self,
            hospital_id,
            study_id,
            patient_id,
            **kwargs
        ):
            """delete_study_annotations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_study_annotations(hospital_id, study_id, patient_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                patient_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['patient_id'] = \
                patient_id
            return self.call_with_http_info(**kwargs)

        self.delete_study_annotations = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/annotations',
                'operation_id': 'delete_study_annotations',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'patient_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'patient_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'patient_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'patient_id': 'patientId',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'patient_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_study_annotations
        )

        def __delete_study_files(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """delete_study_files  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_study_files(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                keys ([str]): [optional] if omitted the server will use the default value of []
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.delete_study_files = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'delete_study_files',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'keys',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'keys':
                        ([str],),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'keys': 'keys',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'keys': 'query',
                },
                'collection_format_map': {
                    'keys': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_study_files
        )

        def __delete_study_series(
            self,
            hospital_id,
            study_id,
            series_id,
            **kwargs
        ):
            """delete_study_series  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_study_series(hospital_id, study_id, series_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                series_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['series_id'] = \
                series_id
            return self.call_with_http_info(**kwargs)

        self.delete_study_series = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series/{series_id}',
                'operation_id': 'delete_study_series',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'series_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'series_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_study_series
        )

        def __get_all_institutes(
            self,
            **kwargs
        ):
            """get_all_institutes  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_all_institutes(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                x_fields (str): An optional fields mask. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Institute]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_all_institutes = _Endpoint(
            settings={
                'response_type': ([Institute],),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals',
                'operation_id': 'get_all_institutes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'x_fields',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_all_institutes
        )

        def __get_series(
            self,
            hospital_id,
            series_id,
            **kwargs
        ):
            """get_series  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_series(hospital_id, series_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                series_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Series
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['series_id'] = \
                series_id
            return self.call_with_http_info(**kwargs)

        self.get_series = _Endpoint(
            settings={
                'response_type': (Series,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series/{series_id}',
                'operation_id': 'get_series',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'series_id',
                ],
                'required': [
                    'hospital_id',
                    'series_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'series_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'series_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_series
        )

        def __get_series_list(
            self,
            hospital_id,
            **kwargs
        ):
            """get_series_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_series_list(hospital_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):

            Keyword Args:
                filter (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Series]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            return self.call_with_http_info(**kwargs)

        self.get_series_list = _Endpoint(
            settings={
                'response_type': ([Series],),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series',
                'operation_id': 'get_series_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_series_list
        )

        def __get_series_preview(
            self,
            hospital_id,
            series_id,
            file_name,
            **kwargs
        ):
            """get_series_preview  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_series_preview(hospital_id, series_id, file_name, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                series_id (str):
                file_name (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['series_id'] = \
                series_id
            kwargs['file_name'] = \
                file_name
            return self.call_with_http_info(**kwargs)

        self.get_series_preview = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/series/{series_id}/{file_name}',
                'operation_id': 'get_series_preview',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'series_id',
                    'file_name',
                ],
                'required': [
                    'hospital_id',
                    'series_id',
                    'file_name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'series_id':
                        (str,),
                    'file_name':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'series_id': 'series_id',
                    'file_name': 'file_name',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'series_id': 'path',
                    'file_name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'image/jpg'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_series_preview
        )

        def __get_studies(
            self,
            hospital_id,
            **kwargs
        ):
            """get_studies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_studies(hospital_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):

            Keyword Args:
                filter (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [RootStudy]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            return self.call_with_http_info(**kwargs)

        self.get_studies = _Endpoint(
            settings={
                'response_type': ([RootStudy],),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies',
                'operation_id': 'get_studies',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_studies
        )

        def __get_study(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """get_study  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_study(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.get_study = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'get_study',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_study
        )

        def __get_study_download_file(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """get_study_download_file  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_study_download_file(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                file_type
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.get_study_download_file = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/download-files',
                'operation_id': 'get_study_download_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/zip'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_study_download_file
        )

        def __get_study_files(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """get_study_files  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_study_files(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                auxiliary (str): [optional] if omitted the server will use the default value of "false"
                completed (bool): [optional] if omitted the server will use the default value of False
                x_fields (str): An optional fields mask. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Files
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.get_study_files = _Endpoint(
            settings={
                'response_type': (Files,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'get_study_files',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'auxiliary',
                    'completed',
                    'x_fields',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'auxiliary':
                        (str,),
                    'completed':
                        (bool,),
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'auxiliary': 'auxiliary',
                    'completed': 'completed',
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'auxiliary': 'query',
                    'completed': 'query',
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_study_files
        )

        def __get_study_series_list(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """get_study_series_list  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_study_series_list(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                filter (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Series]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.get_study_series_list = _Endpoint(
            settings={
                'response_type': ([Series],),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series',
                'operation_id': 'get_study_series_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'filter',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'filter':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'filter': '$filter',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'filter': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_study_series_list
        )

        def __patch_study(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """patch_study  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_study(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (RootStudy):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.patch_study = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'patch_study',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (RootStudy,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__patch_study
        )

        def __post_studies(
            self,
            hospital_id,
            payload,
            **kwargs
        ):
            """post_studies  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_studies(hospital_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                payload (RootStudy):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.post_studies = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies',
                'operation_id': 'post_studies',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'payload':
                        (RootStudy,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_studies
        )

        def __post_study_annotation_state(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """post_study_annotation_state  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_study_annotation_state(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (AnnotationState):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.post_study_annotation_state = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/annotation-state',
                'operation_id': 'post_study_annotation_state',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (AnnotationState,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_study_annotation_state
        )

        def __post_study_case_labels(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """post_study_case_labels  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_study_case_labels(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (CaseLabel):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.post_study_case_labels = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/case-labels',
                'operation_id': 'post_study_case_labels',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (CaseLabel,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_study_case_labels
        )

        def __post_study_download_link(
            self,
            hospital_id,
            study_id,
            **kwargs
        ):
            """post_study_download_link  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_study_download_link(hospital_id, study_id, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            return self.call_with_http_info(**kwargs)

        self.post_study_download_link = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/download-link',
                'operation_id': 'post_study_download_link',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_study_download_link
        )

        def __post_study_electronic_record_state(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """post_study_electronic_record_state  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_study_electronic_record_state(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (ElectronicRecordState):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.post_study_electronic_record_state = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/electronic-record-state',
                'operation_id': 'post_study_electronic_record_state',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (ElectronicRecordState,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_study_electronic_record_state
        )

        def __post_study_files(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """This create study files endpoint actually only stores the file size of a study_id + key combination  # noqa: E501

            Used only for retrieving progress percentage of uploads.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_study_files(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload ([File]):

            Keyword Args:
                x_fields (str): An optional fields mask. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Files
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.post_study_files = _Endpoint(
            settings={
                'response_type': (Files,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/files',
                'operation_id': 'post_study_files',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                    'x_fields',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        ([File],),
                    'x_fields':
                        (str,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'x_fields': 'X-Fields',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                    'x_fields': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_study_files
        )

        def __put_study(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """put_study  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_study(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (RootStudy):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.put_study = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}',
                'operation_id': 'put_study',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (RootStudy,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_study
        )

        def __put_study_series(
            self,
            hospital_id,
            study_id,
            series_id,
            payload,
            **kwargs
        ):
            """put_study_series  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_study_series(hospital_id, study_id, series_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                series_id (str):
                payload (Series):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Series
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['series_id'] = \
                series_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.put_study_series = _Endpoint(
            settings={
                'response_type': (Series,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/series/{series_id}',
                'operation_id': 'put_study_series',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'series_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'series_id':
                        (str,),
                    'payload':
                        (Series,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                    'series_id': 'series_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'series_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_study_series
        )

        def __put_study_sticky_note(
            self,
            hospital_id,
            study_id,
            payload,
            **kwargs
        ):
            """put_study_sticky_note  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_study_sticky_note(hospital_id, study_id, payload, async_req=True)
            >>> result = thread.get()

            Args:
                hospital_id (str):
                study_id (str):
                payload (StudyStickyNote):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                RootStudy
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['hospital_id'] = \
                hospital_id
            kwargs['study_id'] = \
                study_id
            kwargs['payload'] = \
                payload
            return self.call_with_http_info(**kwargs)

        self.put_study_sticky_note = _Endpoint(
            settings={
                'response_type': (RootStudy,),
                'auth': [
                    'csrf_token',
                    'jwt'
                ],
                'endpoint_path': '/hospitals/{hospital_id}/studies/{study_id}/sticky-note',
                'operation_id': 'put_study_sticky_note',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'required': [
                    'hospital_id',
                    'study_id',
                    'payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'hospital_id':
                        (str,),
                    'study_id':
                        (str,),
                    'payload':
                        (StudyStickyNote,),
                },
                'attribute_map': {
                    'hospital_id': 'hospital_id',
                    'study_id': 'study_id',
                },
                'location_map': {
                    'hospital_id': 'path',
                    'study_id': 'path',
                    'payload': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_study_sticky_note
        )
